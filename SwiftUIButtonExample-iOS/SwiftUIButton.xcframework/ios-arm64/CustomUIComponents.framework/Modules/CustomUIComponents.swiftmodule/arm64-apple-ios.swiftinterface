// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name CustomUIComponents
@_exported import CustomUIComponents
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct SwiftUIButton {
  public enum ButtonType<T, S> where T : SwiftUI.PrimitiveButtonStyle, S : SwiftUI.ShapeStyle {
    case plainButton(title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case automaticButton(title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case borderedButton(title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case borderedProminantButton(title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case borderlessButton(title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case imageButton(imageName: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case iconTextButton(imageName: Swift.String, title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case textIconButton(imageName: Swift.String, title: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case iconButton(iconName: Swift.String, buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, foregroundStyle: S? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case destructiveButton(title: Swift.String? = "", buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
    case cancelButton(title: Swift.String? = "", buttonWidth: CoreFoundation.CGFloat? = nil, buttonHeight: CoreFoundation.CGFloat? = nil, font: SwiftUI.Font? = nil, fontWidth: SwiftUI.Font.Width? = nil, fontWeight: SwiftUI.Font.Weight? = nil, fontDesign: SwiftUI.Font.Design? = nil, buttonStyle: T? = nil, buttonBorderShape: SwiftUI.ButtonBorderShape? = nil, tint: SwiftUI.Color? = nil, controlSize: SwiftUI.ControlSize? = nil, padding: CoreFoundation.CGFloat? = nil, accessibility: SwiftUI.Text? = nil, action: () -> Swift.Void)
  }
  public static func createButton<T, S>(for type: CustomUIComponents.SwiftUIButton.ButtonType<T, S>) -> SwiftUI.AnyView where T : SwiftUI.PrimitiveButtonStyle, S : SwiftUI.ShapeStyle
}

